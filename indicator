#!/usr/bin/env bash
# ==================================================================
#   tmux-sysfs-battery/indicator
#   Read the battery status/capacity and display to tmux statusbar.
# ==================================================================

declare -r repo="$(realpath -s $(dirname "${BASH_SOURCE[0]}" ))"

declare -r status_str=(
    "Full"          # status 0
    "Charging"      # status 1
    "Notcharging"   # status 2
    "Discharging"   # status 3~6
    "Discharging"   # unused     // element 4, 5, 6 are not used.
    "Discharging"   # unused     // they are used only to match the
    "Discharging"   # unused     // element number with tmux options.
    "Unknown"       # status 7
)

function info() {
    local -r bpath="/sys/class/power_supply/${conf_batname}"
    local -r pname="$1"

    # Check the battery path is valid
    [[ -e "${bpath}" ]] || {
        echo "The given device \"${bpath}\" is not found." 1>&2
        return 1
    }

    # Check the battery type is valid
    local -r btype="$(cat "${bpath}/type" 2>/dev/null)"
    [[ "${btype}" == "Battery" ]] || {
        echo "The given device \"${bpath}\" is not battery." 1>&2
        return 1
    }

    # Check the battery parameter is valid
    local -r bparam="$(cat "${bpath}/${pname}" 2>/dev/null)"
    [[ -n "${bparam}" ]] || {
        echo "The given parameter \"${pname}\" is invalid" 1>&2
        return 1
    }

    echo "${bparam}"
    return 0
}

function get-simple-format() {
    local -r bat_status="$1"
    local -r bat_capacity="$2"

    case "$bat_status" in
    "${status_str[0]}") printf "${conf_simple_fmt[0]}" && return 0;;
    "${status_str[1]}") printf "${conf_simple_fmt[1]}" && return 0;;
    "${status_str[2]}") printf "${conf_simple_fmt[2]}" && return 0;;
    "${status_str[3]}")
        local threshold=(
            "${conf_bat_threshold[0]}"
            "${conf_bat_threshold[1]}"
            "${conf_bat_threshold[2]}"
        )
        [[ "$bat_capacity" -lt "0" ]] &&\
            printf "${conf_simple_fmt[7]}" && return 0
        [[ "$bat_capacity" -lt ${threshold[0]} ]] &&\
            printf "${conf_simple_fmt[6]}" && return 0
        [[ "$bat_capacity" -lt ${threshold[1]} ]] &&\
            printf "${conf_simple_fmt[5]}" && return 0
        [[ "$bat_capacity" -lt ${threshold[2]} ]] &&\
            printf "${conf_simple_fmt[4]}" && return 0

        printf "${conf_simple_fmt[3]}" && return 0
        ;;
    *) printf "${conf_simple_fmt[7]}" && return 0;;
    esac
}

function get-normal-format() {
    local -r bat_status="$1"
    local -r bat_capacity="$2"

    case "$bat_status" in
    "${status_str[0]}") printf "${conf_normal_fmt[0]}" && return 0;;
    "${status_str[1]}") printf "${conf_normal_fmt[1]}" && return 0;;
    "${status_str[2]}") printf "${conf_normal_fmt[2]}" && return 0;;
    "${status_str[3]}")
        local threshold=(
            "${conf_bat_threshold[0]}"
            "${conf_bat_threshold[1]}"
            "${conf_bat_threshold[2]}"
        )
        [[ "$bat_capacity" -lt "0" ]] &&\
            printf "${conf_normal_fmt[7]}" && return 0
        [[ "$bat_capacity" -lt ${threshold[0]} ]] &&\
            printf "${conf_normal_fmt[6]}" && return 0
        [[ "$bat_capacity" -lt ${threshold[1]} ]] &&\
            printf "${conf_normal_fmt[5]}" && return 0
        [[ "$bat_capacity" -lt ${threshold[2]} ]] &&\
            printf "${conf_normal_fmt[4]}" && return 0

        printf "${conf_normal_fmt[3]}" && return 0
        ;;
    *) printf "${conf_normal_fmt[7]}" && return 0;;
    esac
}

function get-format() {
    local -r width="$(tmux display-message -F"#{window_width}" -p)"
    local threshold=$conf_simple_threshold

    [[ $width -le ${threshold}  ]]\
        && get-simple-format $@\
        || get-normal-format $@

    return 0
}

function indicator() {
    source "$repo/config"

    # "Not charging" status will be replaced with
    # "Notcharging" (whitespace is removed) to send safely
    # as function parameter.
    local bat_status=$(info "status" | tr -d ' ')
    local bat_capacity=$(info "capacity")

    local format="$(get-format "$bat_status" "$bat_capacity")"
    local from="\#{capacity}"
    local to="${bat_capacity}%%"
    local new_format="${format//${from}/${to}}"
    printf "${new_format}"
    return 0
}

indicator
